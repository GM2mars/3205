# ┌─────────────────────────────────────────────────────────────────────────┐
# │ 1. Stage: Builder                                                     │
# └─────────────────────────────────────────────────────────────────────────┘

# Берём официальный образ Bun (который содержит runtime, пакетный менеджер и bundler).
FROM oven/bun:latest AS builder
WORKDIR /app

# 1.1. Копируем только файлы, нужные для установки зависимостей: package.json и bun.lockb
COPY package.json bun.lockb* ./

# 1.2. Устанавливаем все зависимости (dev + prod) через Bun
# Bun install аналогичен npm install / yarn install, но работает быстрее за счёт собственного пакетного менеджера. :contentReference[oaicite:3]{index=3}
RUN bun install

# 1.3. Копируем весь исходный код приложения (Vite + React)
COPY . .



# ┌─────────────────────────────────────────────────────────────────────────┐
# │ 2. Stage: Production                                                   │
# └─────────────────────────────────────────────────────────────────────────┘

# В качестве базового образа снова используем чистый Bun, чтобы не тащить вне зависимости от dev-инструментов/исходников.
FROM oven/bun:latest AS runner
WORKDIR /app

# 2.1. Копируем готовый результат сборки (папка dist) из предыдущего этапа
COPY --from=builder /app/dist ./dist

# 2.2. Указываем, что слушаем порт 3000 (или любой другой, который выберете)
EXPOSE 3000

# 2.3. Запускаем статический сервер Bun, отдающий содержимое dist
# Bun может напрямую принимать HTML-файл и отдавать весь каталог как статический сайт. :contentReference[oaicite:6]{index=6}
CMD ["bun", "./dist/index.html", "--hostname", "0.0.0.0"]
